// Code generated by mockery v2.42.0. DO NOT EDIT.

package repo

import (
	domain "github.com/DarknessRdg/rinha-backend-2024-q1/internal/account/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockIAccountRepo is an autogenerated mock type for the IAccountRepo type
type MockIAccountRepo struct {
	mock.Mock
}

type MockIAccountRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAccountRepo) EXPECT() *MockIAccountRepo_Expecter {
	return &MockIAccountRepo_Expecter{mock: &_m.Mock}
}

// GetByIdAndLock provides a mock function with given fields: id
func (_m *MockIAccountRepo) GetByIdAndLock(id domain.AccountId) (*domain.Account, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdAndLock")
	}

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AccountId) (*domain.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(domain.AccountId) *domain.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.AccountId) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAccountRepo_GetByIdAndLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIdAndLock'
type MockIAccountRepo_GetByIdAndLock_Call struct {
	*mock.Call
}

// GetByIdAndLock is a helper method to define mock.On call
//   - id domain.AccountId
func (_e *MockIAccountRepo_Expecter) GetByIdAndLock(id interface{}) *MockIAccountRepo_GetByIdAndLock_Call {
	return &MockIAccountRepo_GetByIdAndLock_Call{Call: _e.mock.On("GetByIdAndLock", id)}
}

func (_c *MockIAccountRepo_GetByIdAndLock_Call) Run(run func(id domain.AccountId)) *MockIAccountRepo_GetByIdAndLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AccountId))
	})
	return _c
}

func (_c *MockIAccountRepo_GetByIdAndLock_Call) Return(_a0 *domain.Account, _a1 error) *MockIAccountRepo_GetByIdAndLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAccountRepo_GetByIdAndLock_Call) RunAndReturn(run func(domain.AccountId) (*domain.Account, error)) *MockIAccountRepo_GetByIdAndLock_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: account
func (_m *MockIAccountRepo) Update(account *domain.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAccountRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIAccountRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - account *domain.Account
func (_e *MockIAccountRepo_Expecter) Update(account interface{}) *MockIAccountRepo_Update_Call {
	return &MockIAccountRepo_Update_Call{Call: _e.mock.On("Update", account)}
}

func (_c *MockIAccountRepo_Update_Call) Run(run func(account *domain.Account)) *MockIAccountRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Account))
	})
	return _c
}

func (_c *MockIAccountRepo_Update_Call) Return(_a0 error) *MockIAccountRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAccountRepo_Update_Call) RunAndReturn(run func(*domain.Account) error) *MockIAccountRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAccountRepo creates a new instance of MockIAccountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAccountRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAccountRepo {
	mock := &MockIAccountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
