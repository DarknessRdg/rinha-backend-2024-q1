// Code generated by mockery v2.42.0. DO NOT EDIT.

package repo

import (
	domain "github.com/DarknessRdg/rinha-backend-2024-q1/internal/transaction/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockITransactionRepo is an autogenerated mock type for the ITransactionRepo type
type MockITransactionRepo struct {
	mock.Mock
}

type MockITransactionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransactionRepo) EXPECT() *MockITransactionRepo_Expecter {
	return &MockITransactionRepo_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: transaction
func (_m *MockITransactionRepo) Insert(transaction domain.Transaction) error {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockITransactionRepo_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockITransactionRepo_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - transaction domain.Transaction
func (_e *MockITransactionRepo_Expecter) Insert(transaction interface{}) *MockITransactionRepo_Insert_Call {
	return &MockITransactionRepo_Insert_Call{Call: _e.mock.On("Insert", transaction)}
}

func (_c *MockITransactionRepo_Insert_Call) Run(run func(transaction domain.Transaction)) *MockITransactionRepo_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Transaction))
	})
	return _c
}

func (_c *MockITransactionRepo_Insert_Call) Return(_a0 error) *MockITransactionRepo_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockITransactionRepo_Insert_Call) RunAndReturn(run func(domain.Transaction) error) *MockITransactionRepo_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITransactionRepo creates a new instance of MockITransactionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransactionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransactionRepo {
	mock := &MockITransactionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
